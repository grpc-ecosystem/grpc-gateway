openapi: 3.0.1
info:
  title: Echo Service
  description: |-
    Echo Service API consists of a single service which returns
    a message.
  version: version not set
servers:
- url: /
tags:
- name: EchoService
paths:
  /v1/example/echo/nested/{nId.nId}:
    get:
      tags:
      - EchoService
      summary: Echo method receives a simple message and returns it.
      description: |-
        The message posted as the id parameter will also be
        returned.
      operationId: EchoService_Echo7
      parameters:
      - name: nId.nId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: query
        description: Id represents the message identifier.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: num
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/echo/resource/{resourceId}:
    get:
      tags:
      - EchoService
      summary: Echo method receives a simple message and returns it.
      description: |-
        The message posted as the id parameter will also be
        returned.
      operationId: EchoService_Echo6
      parameters:
      - name: resourceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: query
        description: Id represents the message identifier.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: num
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/echo/{id}:
    post:
      tags:
      - EchoService
      summary: Echo method receives a simple message and returns it.
      description: |-
        The message posted as the id parameter will also be
        returned.
      operationId: EchoService_Echo
      parameters:
      - name: id
        in: path
        description: Id represents the message identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: num
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/echo/{id}/{num}:
    get:
      tags:
      - EchoService
      summary: Echo method receives a simple message and returns it.
      description: |-
        The message posted as the id parameter will also be
        returned.
      operationId: EchoService_Echo2
      parameters:
      - name: id
        in: path
        description: Id represents the message identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: num
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/echo/{id}/{num}/{lang}:
    get:
      tags:
      - EchoService
      summary: Echo method receives a simple message and returns it.
      description: |-
        The message posted as the id parameter will also be
        returned.
      operationId: EchoService_Echo3
      parameters:
      - name: id
        in: path
        description: Id represents the message identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: num
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: lang
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/echo1/{id}/{lineNum}/{status.note}:
    get:
      tags:
      - EchoService
      summary: Echo method receives a simple message and returns it.
      description: |-
        The message posted as the id parameter will also be
        returned.
      operationId: EchoService_Echo4
      parameters:
      - name: id
        in: path
        description: Id represents the message identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: lineNum
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: status.note
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: num
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/echo2/{no.note}:
    get:
      tags:
      - EchoService
      summary: Echo method receives a simple message and returns it.
      description: |-
        The message posted as the id parameter will also be
        returned.
      operationId: EchoService_Echo5
      parameters:
      - name: no.note
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: query
        description: Id represents the message identifier.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: num
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/echo_body:
    post:
      tags:
      - EchoService
      summary: EchoBody method receives a simple message and returns it.
      operationId: EchoService_EchoBody
      requestBody:
        description: SimpleMessage represents a simple message sent to the Echo service.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/examplepbSimpleMessage"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
  /v1/example/echo_body/{id}:
    put:
      tags:
      - EchoService
      summary: EchoBody method receives a simple message and returns it.
      operationId: EchoService_EchoBody2
      parameters:
      - name: id
        in: path
        description: Id represents the message identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: num
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/examplepbEmbedded"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: "no"
  /v1/example/echo_delete:
    delete:
      tags:
      - EchoService
      summary: EchoDelete method receives a simple message and returns it.
      operationId: EchoService_EchoDelete
      parameters:
      - name: id
        in: query
        description: Id represents the message identifier.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: num
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/echo_patch:
    patch:
      tags:
      - EchoService
      summary: EchoPatch method receives a NonStandardUpdateRequest and returns it.
      operationId: EchoService_EchoPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/examplepbDynamicMessage"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbDynamicMessageUpdate"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
  /v1/example/echo_unauthorized:
    get:
      tags:
      - EchoService
      summary: |-
        EchoUnauthorized method receives a simple message and returns it. It must
        always return a google.rpc.Code of `UNAUTHENTICATED` and a HTTP Status code
        of 401.
      operationId: EchoService_EchoUnauthorized
      parameters:
      - name: id
        in: query
        description: Id represents the message identifier.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: num
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lineNum
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: lang
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: status.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: en
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.progress
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: no.note
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.nId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nId.val
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSimpleMessage"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
components:
  schemas:
    examplepbDynamicMessage:
      type: object
      properties:
        structField:
          type: object
          properties: {}
          example: {}
        valueField:
          type: object
      description: |-
        DynamicMessage represents a message which can have its structure
        built dynamically using Struct and Values.
      example:
        structField: {}
        valueField: {}
    examplepbDynamicMessageUpdate:
      type: object
      properties:
        body:
          $ref: "#/components/schemas/examplepbDynamicMessage"
        updateMask:
          type: string
      example:
        body:
          structField: {}
          valueField: {}
        updateMask: updateMask
    examplepbEmbedded:
      type: object
      properties:
        progress:
          type: string
          format: int64
        note:
          type: string
      description: Embedded represents a message embedded in SimpleMessage.
      example:
        note: note
        progress: progress
    examplepbNestedMessage:
      type: object
      properties:
        nId:
          type: string
        val:
          type: string
      example:
        val: val
        nId: nId
    examplepbSimpleMessage:
      type: object
      properties:
        id:
          type: string
          description: Id represents the message identifier.
        num:
          type: string
          format: int64
        lineNum:
          type: string
          format: int64
        lang:
          type: string
        status:
          $ref: "#/components/schemas/examplepbEmbedded"
        en:
          type: string
          format: int64
        "no":
          $ref: "#/components/schemas/examplepbEmbedded"
        resourceId:
          type: string
        nId:
          $ref: "#/components/schemas/examplepbNestedMessage"
      description: SimpleMessage represents a simple message sent to the Echo service.
      example:
        "no": null
        resourceId: resourceId
        num: num
        nId:
          val: val
          nId: nId
        lineNum: lineNum
        en: en
        id: id
        lang: lang
        status:
          note: note
          progress: progress
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      x-schema-name: protobufAny
    protobufNullValue:
      type: string
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

        The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      default: NULL_VALUE
      enum:
      - NULL_VALUE
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          description: "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          format: int32
        message:
          type: string
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          items:
            $ref: "#/components/schemas/protobufAny"
      description: |-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It is
        used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details.

        You can find out more about this error model and how to work with it in the
        [API Design Guide](https://cloud.google.com/apis/design/errors).
x-original-swagger-version: "2.0"
