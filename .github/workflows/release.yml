on:
  push:
    tags:
      - v2.[0-9]+.[0-9]+
  # For testing the workflow before pushing a tag
  # This will run goreleaser with --snapshot and test the
  # SLSA generator.
  workflow_dispatch:
permissions:
  contents: read
name: release
jobs:
  goreleaser:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
        with:
          check-latest: true
      - name: Generate goreleaser args
        id: args
        run: |
          set -euo pipefail
          args='release --rm-dist'
          if [[ "$GITHUB_REF" != refs/tags/* ]]; then
            args+=' --snapshot'
          fi
          echo "args=$args" >> $GITHUB_OUTPUT
      - uses: goreleaser/goreleaser-action@8f67e590f2d095516493f017008adc464e63adb1 # v4
        id: run-goreleaser
        with:
          args: ${{ steps.args.outputs.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate subject
        id: hash
        env:
          ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail

          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
          echo "::set-output name=hashes::$(cat $checksum_file | base64 -w0)"
  provenance:
    needs: [goreleaser]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      compile-generator: true # Workaround for https://github.com/slsa-framework/slsa-github-generator/issues/1163
      base64-subjects: "${{ needs.goreleaser.outputs.hashes }}"
      upload-assets: ${{ github.event_name == 'push' }} # upload to a new release when pushing via tag

  push_bsr_plugins:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3
      - uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # tag=v2
      - uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # tag=v2
        with:
          registry: plugins.buf.build
          username: grpcgatewaybot
          password: ${{ secrets.BUF_TOKEN }}
      - name: Set protobuf-version
        run: echo ::set-output name=version::$(go list -m -f '{{.Version}}' google.golang.org/protobuf)
        id: protobuf-version
      - name: Set grpc-version
        run: echo ::set-output name=version::$(go list -m -f '{{.Version}}' google.golang.org/grpc)
        id: grpc-version
      - uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # tag=v3
        with:
          push: true
          tags: plugins.buf.build/grpc-ecosystem/grpc-gateway:${{ github.ref_name }}-1
          context: .github/plugins/protoc-gen-grpc-gateway
          platforms: linux/amd64
          build-args: |
            RELEASE_VERSION=${{ github.ref_name }}
            GO_PROTOBUF_RELEASE_VERSION=${{ steps.protobuf-version.outputs.version }}
            GO_GRPC_RELEASE_VERSION=${{ steps.grpc-version.outputs.version }}
      - uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # tag=v3
        with:
          push: true
          tags: plugins.buf.build/grpc-ecosystem/openapiv2:${{ github.ref_name }}-1
          context: .github/plugins/protoc-gen-openapiv2
          platforms: linux/amd64
          build-args: |
            RELEASE_VERSION=${{ github.ref_name }}
