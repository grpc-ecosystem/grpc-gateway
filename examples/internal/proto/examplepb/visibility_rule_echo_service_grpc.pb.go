// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: examples/internal/proto/examplepb/visibility_rule_echo_service.proto

// Visibility Rule Echo Service
// Similar to echo_service.proto but with annotations to change visibility
// of services, methods, fields and enum values.
//
// `google.api.VisibilityRule` annotations are added to customize where they are generated.
// Combined with the option `visibility_restriction_selectors` overlapping rules will appear in the OpenAPI output.
// Elements without `google.api.VisibilityRule` annotations will appear as usual in the generated output.
//
// These restrictions and selectors are completely arbitrary and you can define whatever values or hierarchies you want.
// In this example `INTERNAL`, `PREVIEW` are used, but `INTERNAL`, `ALPHA`, `BETA`, `RELEASED`, or anything else could be used if you wish.

package examplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VisibilityRuleEchoService_Echo_FullMethodName                   = "/grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleEchoService/Echo"
	VisibilityRuleEchoService_EchoInternal_FullMethodName           = "/grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleEchoService/EchoInternal"
	VisibilityRuleEchoService_EchoPreview_FullMethodName            = "/grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleEchoService/EchoPreview"
	VisibilityRuleEchoService_EchoInternalAndPreview_FullMethodName = "/grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleEchoService/EchoInternalAndPreview"
)

// VisibilityRuleEchoServiceClient is the client API for VisibilityRuleEchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VisibilityRuleEchoService service responds to incoming echo requests.
// Different services will be available in the swagger documentation depending
// based on `google.api.VisibilityRule`s and the set `visibility_restriction_selectors`
// flag when calling protoc-gen-openapiv2.
type VisibilityRuleEchoServiceClient interface {
	// Echo method receives a simple message and returns it.
	// It should always be visible in the open API output.
	Echo(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleSimpleMessage, error)
	// EchoInternal is an internal API that should only be visible in the OpenAPI spec
	// if `visibility_restriction_selectors` includes "INTERNAL".
	EchoInternal(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleSimpleMessage, error)
	// EchoPreview is a preview API that should only be visible in the OpenAPI spec
	// if `visibility_restriction_selectors` includes "PREVIEW".
	EchoPreview(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleMessageInPreviewMethod, error)
	// EchoInternalAndPreview is a internal and preview API that should only be visible in the OpenAPI spec
	// if `visibility_restriction_selectors` includes "PREVIEW" or "INTERNAL".
	EchoInternalAndPreview(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleSimpleMessage, error)
}

type visibilityRuleEchoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisibilityRuleEchoServiceClient(cc grpc.ClientConnInterface) VisibilityRuleEchoServiceClient {
	return &visibilityRuleEchoServiceClient{cc}
}

func (c *visibilityRuleEchoServiceClient) Echo(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleSimpleMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisibilityRuleSimpleMessage)
	err := c.cc.Invoke(ctx, VisibilityRuleEchoService_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityRuleEchoServiceClient) EchoInternal(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleSimpleMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisibilityRuleSimpleMessage)
	err := c.cc.Invoke(ctx, VisibilityRuleEchoService_EchoInternal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityRuleEchoServiceClient) EchoPreview(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleMessageInPreviewMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisibilityRuleMessageInPreviewMethod)
	err := c.cc.Invoke(ctx, VisibilityRuleEchoService_EchoPreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visibilityRuleEchoServiceClient) EchoInternalAndPreview(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleSimpleMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisibilityRuleSimpleMessage)
	err := c.cc.Invoke(ctx, VisibilityRuleEchoService_EchoInternalAndPreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisibilityRuleEchoServiceServer is the server API for VisibilityRuleEchoService service.
// All implementations should embed UnimplementedVisibilityRuleEchoServiceServer
// for forward compatibility.
//
// VisibilityRuleEchoService service responds to incoming echo requests.
// Different services will be available in the swagger documentation depending
// based on `google.api.VisibilityRule`s and the set `visibility_restriction_selectors`
// flag when calling protoc-gen-openapiv2.
type VisibilityRuleEchoServiceServer interface {
	// Echo method receives a simple message and returns it.
	// It should always be visible in the open API output.
	Echo(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleSimpleMessage, error)
	// EchoInternal is an internal API that should only be visible in the OpenAPI spec
	// if `visibility_restriction_selectors` includes "INTERNAL".
	EchoInternal(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleSimpleMessage, error)
	// EchoPreview is a preview API that should only be visible in the OpenAPI spec
	// if `visibility_restriction_selectors` includes "PREVIEW".
	EchoPreview(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleMessageInPreviewMethod, error)
	// EchoInternalAndPreview is a internal and preview API that should only be visible in the OpenAPI spec
	// if `visibility_restriction_selectors` includes "PREVIEW" or "INTERNAL".
	EchoInternalAndPreview(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleSimpleMessage, error)
}

// UnimplementedVisibilityRuleEchoServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVisibilityRuleEchoServiceServer struct{}

func (UnimplementedVisibilityRuleEchoServiceServer) Echo(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleSimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedVisibilityRuleEchoServiceServer) EchoInternal(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleSimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoInternal not implemented")
}
func (UnimplementedVisibilityRuleEchoServiceServer) EchoPreview(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleMessageInPreviewMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoPreview not implemented")
}
func (UnimplementedVisibilityRuleEchoServiceServer) EchoInternalAndPreview(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleSimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoInternalAndPreview not implemented")
}
func (UnimplementedVisibilityRuleEchoServiceServer) testEmbeddedByValue() {}

// UnsafeVisibilityRuleEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisibilityRuleEchoServiceServer will
// result in compilation errors.
type UnsafeVisibilityRuleEchoServiceServer interface {
	mustEmbedUnimplementedVisibilityRuleEchoServiceServer()
}

func RegisterVisibilityRuleEchoServiceServer(s grpc.ServiceRegistrar, srv VisibilityRuleEchoServiceServer) {
	// If the following call pancis, it indicates UnimplementedVisibilityRuleEchoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VisibilityRuleEchoService_ServiceDesc, srv)
}

func _VisibilityRuleEchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisibilityRuleSimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityRuleEchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisibilityRuleEchoService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityRuleEchoServiceServer).Echo(ctx, req.(*VisibilityRuleSimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityRuleEchoService_EchoInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisibilityRuleSimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityRuleEchoServiceServer).EchoInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisibilityRuleEchoService_EchoInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityRuleEchoServiceServer).EchoInternal(ctx, req.(*VisibilityRuleSimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityRuleEchoService_EchoPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisibilityRuleSimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityRuleEchoServiceServer).EchoPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisibilityRuleEchoService_EchoPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityRuleEchoServiceServer).EchoPreview(ctx, req.(*VisibilityRuleSimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisibilityRuleEchoService_EchoInternalAndPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisibilityRuleSimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityRuleEchoServiceServer).EchoInternalAndPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisibilityRuleEchoService_EchoInternalAndPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityRuleEchoServiceServer).EchoInternalAndPreview(ctx, req.(*VisibilityRuleSimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// VisibilityRuleEchoService_ServiceDesc is the grpc.ServiceDesc for VisibilityRuleEchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisibilityRuleEchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleEchoService",
	HandlerType: (*VisibilityRuleEchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _VisibilityRuleEchoService_Echo_Handler,
		},
		{
			MethodName: "EchoInternal",
			Handler:    _VisibilityRuleEchoService_EchoInternal_Handler,
		},
		{
			MethodName: "EchoPreview",
			Handler:    _VisibilityRuleEchoService_EchoPreview_Handler,
		},
		{
			MethodName: "EchoInternalAndPreview",
			Handler:    _VisibilityRuleEchoService_EchoInternalAndPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/internal/proto/examplepb/visibility_rule_echo_service.proto",
}

const (
	VisibilityRuleInternalEchoService_Echo_FullMethodName = "/grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleInternalEchoService/Echo"
)

// VisibilityRuleInternalEchoServiceClient is the client API for VisibilityRuleInternalEchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VisibilityRuleInternalEchoService service responds to incoming echo requests.
// It should only be visible in the OpenAPI spec if `visibility_restriction_selectors` includes "INTERNAL".
type VisibilityRuleInternalEchoServiceClient interface {
	// Echo method receives a simple message and returns it.
	// It should not be visible in the open API output.
	Echo(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleSimpleMessage, error)
}

type visibilityRuleInternalEchoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisibilityRuleInternalEchoServiceClient(cc grpc.ClientConnInterface) VisibilityRuleInternalEchoServiceClient {
	return &visibilityRuleInternalEchoServiceClient{cc}
}

func (c *visibilityRuleInternalEchoServiceClient) Echo(ctx context.Context, in *VisibilityRuleSimpleMessage, opts ...grpc.CallOption) (*VisibilityRuleSimpleMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisibilityRuleSimpleMessage)
	err := c.cc.Invoke(ctx, VisibilityRuleInternalEchoService_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisibilityRuleInternalEchoServiceServer is the server API for VisibilityRuleInternalEchoService service.
// All implementations should embed UnimplementedVisibilityRuleInternalEchoServiceServer
// for forward compatibility.
//
// VisibilityRuleInternalEchoService service responds to incoming echo requests.
// It should only be visible in the OpenAPI spec if `visibility_restriction_selectors` includes "INTERNAL".
type VisibilityRuleInternalEchoServiceServer interface {
	// Echo method receives a simple message and returns it.
	// It should not be visible in the open API output.
	Echo(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleSimpleMessage, error)
}

// UnimplementedVisibilityRuleInternalEchoServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVisibilityRuleInternalEchoServiceServer struct{}

func (UnimplementedVisibilityRuleInternalEchoServiceServer) Echo(context.Context, *VisibilityRuleSimpleMessage) (*VisibilityRuleSimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedVisibilityRuleInternalEchoServiceServer) testEmbeddedByValue() {}

// UnsafeVisibilityRuleInternalEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisibilityRuleInternalEchoServiceServer will
// result in compilation errors.
type UnsafeVisibilityRuleInternalEchoServiceServer interface {
	mustEmbedUnimplementedVisibilityRuleInternalEchoServiceServer()
}

func RegisterVisibilityRuleInternalEchoServiceServer(s grpc.ServiceRegistrar, srv VisibilityRuleInternalEchoServiceServer) {
	// If the following call pancis, it indicates UnimplementedVisibilityRuleInternalEchoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VisibilityRuleInternalEchoService_ServiceDesc, srv)
}

func _VisibilityRuleInternalEchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisibilityRuleSimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisibilityRuleInternalEchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisibilityRuleInternalEchoService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisibilityRuleInternalEchoServiceServer).Echo(ctx, req.(*VisibilityRuleSimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// VisibilityRuleInternalEchoService_ServiceDesc is the grpc.ServiceDesc for VisibilityRuleInternalEchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisibilityRuleInternalEchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleInternalEchoService",
	HandlerType: (*VisibilityRuleInternalEchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _VisibilityRuleInternalEchoService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/internal/proto/examplepb/visibility_rule_echo_service.proto",
}
