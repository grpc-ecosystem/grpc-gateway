on:
  push:
    tags:
      - v2.[0-9]+.[0-9]+
permissions:
  contents: read
name: release
jobs:
  goreleaser:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # tag=v3
        with:
          check-latest: true
      - uses: goreleaser/goreleaser-action@ff11ca24a9b39f2d36796d1fbd7a4e39c182630a # tag=v3
        id: run-goreleaser
        with:
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate subject
        id: hash
        env:
          ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail

          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
          echo "::set-output name=hashes::$(cat $checksum_file | base64 -w0)"
  provenance:
    needs: [goreleaser]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@bdd89e60dc5387d8f819bebc702987956bcd4913 # tag=v1.2.0
    with:
      base64-subjects: "${{ needs.goreleaser.outputs.hashes }}"
      upload-assets: true # upload to a new release

  push_bsr_plugins:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3
      - uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # tag=v2
      - uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        with:
          registry: plugins.buf.build
          username: grpcgatewaybot
          password: ${{ secrets.BUF_TOKEN }}
      - name: Set protobuf-version
        run: echo ::set-output name=version::$(go list -m -f '{{.Version}}' google.golang.org/protobuf)
        id: protobuf-version
      - name: Set grpc-version
        run: echo ::set-output name=version::$(go list -m -f '{{.Version}}' google.golang.org/grpc)
        id: grpc-version
      - uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94 # tag=v3
        with:
          push: true
          tags: plugins.buf.build/grpc-ecosystem/grpc-gateway:${{ github.ref_name }}-1
          context: .github/plugins/protoc-gen-grpc-gateway
          platforms: linux/amd64
          build-args: |
            RELEASE_VERSION=${{ github.ref_name }}
            GO_PROTOBUF_RELEASE_VERSION=${{ steps.protobuf-version.outputs.version }}
            GO_GRPC_RELEASE_VERSION=${{ steps.grpc-version.outputs.version }}
      - uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94 # tag=v3
        with:
          push: true
          tags: plugins.buf.build/grpc-ecosystem/openapiv2:${{ github.ref_name }}-1
          context: .github/plugins/protoc-gen-openapiv2
          platforms: linux/amd64
          build-args: |
            RELEASE_VERSION=${{ github.ref_name }}
