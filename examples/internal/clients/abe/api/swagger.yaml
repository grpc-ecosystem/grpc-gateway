openapi: 3.0.1
info:
  title: A Bit of Everything
  contact:
    name: gRPC-Gateway project
    url: https://github.com/grpc-ecosystem/grpc-gateway
    email: none@example.com
  license:
    name: BSD 3-Clause License
    url: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE
  version: "1.0"
  x-something-something: yadda
externalDocs:
  description: More about gRPC-Gateway
  url: https://github.com/grpc-ecosystem/grpc-gateway
servers:
- url: /
security:
- ApiKeyAuth: []
  BasicAuth: []
- ApiKeyAuth: []
  OAuth2:
  - read
  - write
tags:
- name: echo rpc
  description: Echo Rpc description
  x-traitTag: true
- name: ABitOfEverything
  description: ABitOfEverythingService description -- which should not be used in
    place of the documentation comment!
  externalDocs:
    description: Find out more about EchoService
    url: https://github.com/grpc-ecosystem/grpc-gateway
- name: camelCaseServiceName
- name: AnotherServiceWithNoBindings
- name: SnakeEnumService
paths:
  /v1/example/a_bit_of_everything:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_CreateBody
      requestBody:
        description: Intentionally complicated message type to cover many features
          of Protobuf.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/examplepbABitOfEverything"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/examplepbABitOfEverything"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
  /v1/example/a_bit_of_everything/echo/{value}:
    get:
      tags:
      - echo rpc
      summary: "Summary: Echo rpc"
      description: Description Echo
      externalDocs:
        description: Find out more Echo
        url: https://github.com/grpc-ecosystem/grpc-gateway
      operationId: ABitOfEverythingService_Echo
      parameters:
      - name: value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/subStringMessage"
              example:
                value: the input value
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/subStringMessage"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: integer
                format: integer
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: integer
                format: integer
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        "503":
          description: Returned when the resource is temporarily unavailable.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
          x-number: 100
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/a_bit_of_everything/params/get/nested_enum/{singleNested.ok}:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_CheckNestedEnumGetQueryParams
      parameters:
      - name: singleNested.ok
        in: path
        description: DeepEnum description.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: uuid
        in: query
        required: true
        style: form
        explode: true
        schema:
          pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: |2-
           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ABC
          - DEF
          default: ABC
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - GHI
          - JKL
          default: GHI
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: |-
          Numeric enum title

          Numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/a_bit_of_everything/params/get/{singleNested.name}:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_CheckGetQueryParams
      parameters:
      - name: singleNested.name
        in: path
        description: name is nested field.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: uuid
        in: query
        required: true
        style: form
        explode: true
        schema:
          pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: |2-
           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ABC
          - DEF
          default: ABC
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - GHI
          - JKL
          default: GHI
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: |-
          Numeric enum title

          Numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/a_bit_of_everything/params/post/{stringValue}:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_CheckPostQueryParams
      parameters:
      - name: stringValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: uuid
        in: query
        required: true
        style: form
        explode: true
        schema:
          pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: |2-
           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ABC
          - DEF
          default: ABC
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - GHI
          - JKL
          default: GHI
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: |-
          Numeric enum title

          Numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ABitOfEverythingNested"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/ABitOfEverythingNested"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: singleNested
  /v1/example/a_bit_of_everything/query/{uuidName}:
    get:
      tags:
      - ABitOfEverything
      externalDocs:
        description: Find out more about GetQuery
        url: https://github.com/grpc-ecosystem/grpc-gateway
      operationId: ABitOfEverythingService_GetQuery
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: |2-
           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ABC
          - DEF
          default: ABC
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - GHI
          - JKL
          default: GHI
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: |-
          Numeric enum title

          Numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      deprecated: true
      security: []
  ? /v1/example/a_bit_of_everything/{floatValue}/{doubleValue}/{int64Value}/separator/{uint64Value}/{int32Value}/{fixed64Value}/{fixed32Value}/{boolValue}/{stringValue}/{uint32Value}/{sfixed32Value}/{sfixed64Value}/{sint32Value}/{sint64Value}/{nonConventionalNameValue}/{enumValue}/{pathEnumValue}/{nestedPathEnumValue}/{enumValueAnnotation}
  : post:
      tags:
      - ABitOfEverything
      summary: Create a new ABitOfEverything
      description: This API creates a new ABitOfEverything
      operationId: ABitOfEverythingService_Create
      parameters:
      - name: floatValue
        in: path
        description: Float value field
        required: true
        style: simple
        explode: false
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
          format: double
      - name: int64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: boolean
      - name: stringValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          pattern: "strprefix/[^/]+"
          type: string
      - name: uint32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: sfixed32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: nonConventionalNameValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: enumValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ZERO
          - ONE
      - name: pathEnumValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ABC
          - DEF
      - name: nestedPathEnumValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - GHI
          - JKL
      - name: enumValueAnnotation
        in: path
        description: Numeric enum description.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ZERO
          - ONE
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: uuid
        in: query
        required: true
        style: form
        explode: true
        schema:
          pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/a_bit_of_everything/{uuidName}:
    put:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_Update
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/examplepbABitOfEverythingServiceUpdateBody"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/examplepbABitOfEverythingServiceUpdateBody"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
    options:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_CustomOptionsRequest
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: |2-
           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ABC
          - DEF
          default: ABC
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - GHI
          - JKL
          default: GHI
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: |-
          Numeric enum title

          Numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
    head:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_Exists
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: |2-
           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ABC
          - DEF
          default: ABC
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - GHI
          - JKL
          default: GHI
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: |-
          Numeric enum title

          Numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/a_bit_of_everything/{uuidName}:custom:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_Custom
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: |2-
           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ABC
          - DEF
          default: ABC
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - GHI
          - JKL
          default: GHI
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: |-
          Numeric enum title

          Numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/a_bit_of_everything/{uuidName}:custom:custom:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_DoubleColon
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: |2-
           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ABC
          - DEF
          default: ABC
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - GHI
          - JKL
          default: GHI
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofEmpty
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: object
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mapValue
        in: query
        description: map of numeric enum
        required: false
        style: form
        explode: true
        schema: {}
      - name: mappedStringValue
        in: query
        description: |-
          Map of string title

          Map of string description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mappedNestedValue
        in: query
        required: false
        style: form
        explode: true
        schema: {}
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: |-
          repeated enum value. it is comma-separated in query

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: |-
          Repeated numeric enum title

          Repeated numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: |-
          Numeric enum title

          Numeric enum description.

           - ZERO: ZERO means 0
           - ONE: ONE means 1
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ZERO
          - ONE
          default: ZERO
      - name: repeatedStringAnnotation
        in: query
        description: |-
          Repeated string title

          Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: |-
          DeepEnum description.

           - FALSE: FALSE is false.
           - TRUE: TRUE is true.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
          default: "FALSE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: productId
        in: query
        description: |-
          Test openapiv2 generation of repeated fields

          Only digits are allowed.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
      - name: optionalStringField
        in: query
        description: Test openapiv2 generation of required fields with annotation
          and jsonschema to reproduce
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField1
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: requiredStringField2
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_behavior_json_name_custom
        in: query
        description: Test openapiv2 handling of required json_name fields
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: required_field_schema_json_name_custom
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnly
        in: query
        description: Trailing only
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingOnlyDot
        in: query
        description: Trailing only dot.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingBoth
        in: query
        description: |-
          Leading both

          Trailing both.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trailingMultiline
        in: query
        description: |-
          Leading multiline

          This is an example of a multi-line comment.

          Trailing multiline.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: uuids
        in: query
        description: Specify a custom format of repeated field items
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/a_bit_of_everything/{uuid}:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_Lookup
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
    delete:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_Delete
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      security:
      - ApiKeyAuth: []
        OAuth2:
        - read
        - write
      x-irreversible: true
  ? /v1/example/a_bit_of_everything_repeated/{pathRepeatedFloatValue}/{pathRepeatedDoubleValue}/{pathRepeatedInt64Value}/{pathRepeatedUint64Value}/{pathRepeatedInt32Value}/{pathRepeatedFixed64Value}/{pathRepeatedFixed32Value}/{pathRepeatedBoolValue}/{pathRepeatedStringValue}/{pathRepeatedBytesValue}/{pathRepeatedUint32Value}/{pathRepeatedEnumValue}/{pathRepeatedSfixed32Value}/{pathRepeatedSfixed64Value}/{pathRepeatedSint32Value}/{pathRepeatedSint64Value}
  : get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_GetRepeatedQuery
      parameters:
      - name: pathRepeatedFloatValue
        in: path
        description: repeated values. they are comma-separated in path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: number
            format: float
      - name: pathRepeatedDoubleValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: number
            format: double
      - name: pathRepeatedInt64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: int64
      - name: pathRepeatedUint64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: uint64
      - name: pathRepeatedInt32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int32
      - name: pathRepeatedFixed64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: uint64
      - name: pathRepeatedFixed32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int64
      - name: pathRepeatedBoolValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: boolean
      - name: pathRepeatedStringValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
      - name: pathRepeatedBytesValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            type: string
            format: byte
      - name: pathRepeatedUint32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int64
      - name: pathRepeatedEnumValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: pathRepeatedSfixed32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int32
      - name: pathRepeatedSfixed64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: int64
      - name: pathRepeatedSint32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int32
      - name: pathRepeatedSint64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: int64
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverythingRepeated"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverythingRepeated"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/checkStatus:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_CheckStatus
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbCheckStatusResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbCheckStatusResponse"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/example/deep_path/{singleNested.name}:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_DeepPathEcho
      parameters:
      - name: singleNested.name
        in: path
        description: name is nested field.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ABitOfEverythingServiceDeepPathEchoBody"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/ABitOfEverythingServiceDeepPathEchoBody"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbABitOfEverything"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
  /v1/example/oneofenum:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_PostOneofEnum
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/oneofenumExampleEnum"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/oneofenumExampleEnum"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: exampleEnum
  /v1/example/requiredmessagetype:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_PostRequiredMessageType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/examplepbRequiredMessageTypeRequest"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/examplepbRequiredMessageTypeRequest"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
  /v1/example/snake/{who}/{what}/{where}:
    get:
      tags:
      - SnakeEnumService
      operationId: SnakeEnumService_SnakeEnum
      parameters:
      - name: who
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - value_e
          - value_f
      - name: what
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - value_c
          - value_d
      - name: where
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - value_x
          - value_y
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbSnakeEnumResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbSnakeEnumResponse"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v1/{book.name}:
    patch:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_UpdateBook
      parameters:
      - name: book.name
        in: path
        description: |-
          The resource name of the book.

          Format: `publishers/{publisher}/books/{book}`

          Example: `publishers/1257894000000000000/books/my-book`
        required: true
        style: simple
        explode: false
        schema:
          pattern: "publishers/[^/]+/books/[^/]+"
          type: string
      - name: allowMissing
        in: query
        description: |-
          If set to true, and the book is not found, a new book will be created.
          In this situation, `update_mask` is ignored.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: |-
          The book to update.

          The book's `name` field is used to identify the book to be updated.
          Format: publishers/{publisher}/books/{book}
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1_book_name_body"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/v1_book_name_body_1"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbBook"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbBook"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: book
  /v1/{parent}/books:
    post:
      tags:
      - ABitOfEverything
      summary: Create a book.
      operationId: ABitOfEverythingService_CreateBook
      parameters:
      - name: parent
        in: path
        description: |-
          The publisher in which to create the book.

          Format: `publishers/{publisher}`

          Example: `publishers/1257894000000000000`
        required: true
        style: simple
        explode: false
        schema:
          pattern: "publishers/[^/]+"
          type: string
      - name: bookId
        in: query
        description: |-
          The ID to use for the book.

          This must start with an alphanumeric character.
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: The book to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/examplepbBook"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/examplepbBook"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbBook"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbBook"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: book
  /v2/example/a_bit_of_everything/{uuidName}:
    put:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_UpdateV2
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      - name: updateMask
        in: query
        description: The paths to update.
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: |-
          A bit of everything

          Intentionally complicated message type to cover many features of Protobuf.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/A bit of everything"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/A bit of everything_1"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: abe
    patch:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_UpdateV22
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      requestBody:
        description: |-
          A bit of everything

          Intentionally complicated message type to cover many features of Protobuf.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/A bit of everything_2"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/A bit of everything_3"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: abe
  /v2/example/echo:
    get:
      tags:
      - echo rpc
      summary: "Summary: Echo rpc"
      description: Description Echo
      externalDocs:
        description: Find out more Echo
        url: https://github.com/grpc-ecosystem/grpc-gateway
      operationId: ABitOfEverythingService_Echo3
      parameters:
      - name: value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/subStringMessage"
              example:
                value: the input value
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/subStringMessage"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: integer
                format: integer
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: integer
                format: integer
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        "503":
          description: Returned when the resource is temporarily unavailable.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
          x-number: 100
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
    post:
      tags:
      - echo rpc
      summary: "Summary: Echo rpc"
      description: Description Echo
      externalDocs:
        description: Find out more Echo
        url: https://github.com/grpc-ecosystem/grpc-gateway
      operationId: ABitOfEverythingService_Echo2
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/x-foo-mime:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/subStringMessage"
              example:
                value: the input value
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/subStringMessage"
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: integer
                format: integer
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: integer
                format: integer
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        "503":
          description: Returned when the resource is temporarily unavailable.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
          x-number: 100
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: value
  /v2/example/empty:
    get:
      tags:
      - camelCaseServiceName
      operationId: camelCaseServiceName_Empty
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v2/example/errorwithdetails:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_ErrorWithDetails
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v2/example/overwriterequestcontenttype:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_OverwriteRequestContentType
      requestBody:
        content:
          application/x-bar-mime:
            schema:
              $ref: "#/components/schemas/examplepbBody"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
  /v2/example/overwriteresponsecontenttype:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_OverwriteResponseContentType
      responses:
        "200":
          description: A successful response.
          content:
            application/text:
              schema:
                type: string
                x-content-type: application/text
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/text:
              schema:
                type: object
                x-content-type: application/text
        "404":
          description: Returned when the resource does not exist.
          content:
            application/text:
              schema:
                type: string
                format: string
                x-content-type: application/text
        "418":
          description: I'm a teapot.
          content:
            application/text:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/text:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/text:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v2/example/postwithemptybody/{name}:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_PostWithEmptyBody
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ABitOfEverythingServicePostWithEmptyBodyBody"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/ABitOfEverythingServicePostWithEmptyBodyBody"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
  /v2/example/timeout:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_Timeout
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v2/example/withbody/{id}:
    post:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_GetMessageWithBody
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/examplepbBody"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/examplepbBody"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: data
  /v2/{value}:check:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_CheckExternalPathEnum
      parameters:
      - name: value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ABC
          - DEF
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /v2a/example/a_bit_of_everything/{uuidName}:
    patch:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_UpdateV23
      parameters:
      - name: uuidName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          x-internal: true
        x-internal: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ABitOfEverythingServiceUpdateV2Body"
          application/x-foo-mime:
            schema:
              $ref: "#/components/schemas/ABitOfEverythingServiceUpdateV2Body"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      x-codegen-request-body-name: body
  /v3/{value}:check:
    get:
      tags:
      - ABitOfEverything
      operationId: ABitOfEverythingService_CheckExternalNestedPathEnum
      parameters:
      - name: value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - GHI
          - JKL
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbNumericEnum"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/examplepbErrorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
            application/x-foo-mime:
              schema:
                $ref: "#/components/schemas/rpcStatus"
components:
  schemas:
    ABitOfEverythingNested:
      type: object
      properties:
        name:
          type: string
          description: name is nested field.
        amount:
          type: integer
          format: int64
        ok:
          $ref: "#/components/schemas/NestedDeepEnum"
      description: Nested is nested type.
      example:
        ok: "TRUE"
    ABitOfEverythingServiceDeepPathEchoBody:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringField1
      - requiredStringField2
      - requiredStringViaFieldBehaviorAnnotation
      - required_field_behavior_json_name_custom
      - required_field_schema_json_name_custom
      - uuid
      type: object
      properties:
        singleNested:
          $ref: "#/components/schemas/ABitOfEverythingServiceDeepPathEchoBody_singleNested"
        uuid:
          minLength: 1
          pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          type: string
          format: uuid
          x-internal: true
        nested:
          type: array
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: "#/components/schemas/examplepbNumericEnum"
        pathEnumValue:
          $ref: "#/components/schemas/pathenumPathEnum"
        nestedPathEnumValue:
          $ref: "#/components/schemas/MessagePathEnumNestedPathEnum"
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          title: map of numeric enum
          type: object
          additionalProperties:
            $ref: "#/components/schemas/examplepbNumericEnum"
        mappedStringValue:
          title: Map of string title
          type: object
          additionalProperties:
            type: string
          description: Map of string description.
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        enumValueAnnotation:
          $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nestedAnnotation:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
        productId:
          title: Test openapiv2 generation of repeated fields
          type: array
          description: Only digits are allowed.
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
        optionalStringField:
          title: Test openapiv2 generation of required fields with annotation and
            jsonschema to reproduce
          type: string
        requiredStringField1:
          type: string
        requiredStringField2:
          type: string
        required_field_behavior_json_name_custom:
          title: Test openapiv2 handling of required json_name fields
          type: string
        required_field_schema_json_name_custom:
          type: string
        trailingOnly:
          title: Trailing only
          type: string
        trailingOnlyDot:
          type: string
          description: Trailing only dot.
        trailingBoth:
          title: Leading both
          type: string
          description: Trailing both.
        trailingMultiline:
          title: Leading multiline
          type: string
          description: |-
            This is an example of a multi-line comment.

            Trailing multiline.
        uuids:
          title: Specify a custom format of repeated field items
          type: array
          items:
            type: string
            format: uuid
      description: Intentionally complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
      x-a-bit-of-everything-foo: bar
    ABitOfEverythingServicePostWithEmptyBodyBody:
      type: object
    ABitOfEverythingServiceUpdateV2Body:
      title: UpdateV2Request request for update includes the message and the update
        mask
      type: object
      properties:
        abe:
          $ref: "#/components/schemas/A bit of everything_4"
        updateMask:
          type: string
          description: The paths to update.
    MessagePathEnumNestedPathEnum:
      type: string
      enum:
      - GHI
      - JKL
      default: GHI
    NestedDeepEnum:
      type: string
      description: |-
        DeepEnum is one or zero.

         - FALSE: FALSE is false.
         - TRUE: TRUE is true.
      enum:
      - "FALSE"
      - "TRUE"
      default: "FALSE"
    examplepbABitOfEverything:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringField1
      - requiredStringField2
      - requiredStringViaFieldBehaviorAnnotation
      - required_field_behavior_json_name_custom
      - required_field_schema_json_name_custom
      - uuid
      type: object
      properties:
        singleNested:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        uuid:
          minLength: 1
          pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          type: string
          format: uuid
          x-internal: true
        nested:
          type: array
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: "#/components/schemas/examplepbNumericEnum"
        pathEnumValue:
          $ref: "#/components/schemas/pathenumPathEnum"
        nestedPathEnumValue:
          $ref: "#/components/schemas/MessagePathEnumNestedPathEnum"
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          title: map of numeric enum
          type: object
          additionalProperties:
            $ref: "#/components/schemas/examplepbNumericEnum"
        mappedStringValue:
          title: Map of string title
          type: object
          additionalProperties:
            type: string
          description: Map of string description.
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        enumValueAnnotation:
          $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nestedAnnotation:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
        productId:
          title: Test openapiv2 generation of repeated fields
          type: array
          description: Only digits are allowed.
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
        optionalStringField:
          title: Test openapiv2 generation of required fields with annotation and
            jsonschema to reproduce
          type: string
        requiredStringField1:
          type: string
        requiredStringField2:
          type: string
        required_field_behavior_json_name_custom:
          title: Test openapiv2 handling of required json_name fields
          type: string
        required_field_schema_json_name_custom:
          type: string
        trailingOnly:
          title: Trailing only
          type: string
        trailingOnlyDot:
          type: string
          description: Trailing only dot.
        trailingBoth:
          title: Leading both
          type: string
          description: Trailing both.
        trailingMultiline:
          title: Leading multiline
          type: string
          description: |-
            This is an example of a multi-line comment.

            Trailing multiline.
        uuids:
          title: Specify a custom format of repeated field items
          type: array
          items:
            type: string
            format: uuid
      description: Intentionally complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
      x-a-bit-of-everything-foo: bar
    examplepbABitOfEverythingRepeated:
      title: ABitOfEverythingRepeated is used to validate repeated path parameter
        functionality
      type: object
      properties:
        pathRepeatedFloatValue:
          title: repeated values. they are comma-separated in path
          type: array
          items:
            type: number
            format: float
        pathRepeatedDoubleValue:
          type: array
          items:
            type: number
            format: double
        pathRepeatedInt64Value:
          type: array
          items:
            type: string
            format: int64
        pathRepeatedUint64Value:
          type: array
          items:
            type: string
            format: uint64
        pathRepeatedInt32Value:
          type: array
          items:
            type: integer
            format: int32
        pathRepeatedFixed64Value:
          type: array
          items:
            type: string
            format: uint64
        pathRepeatedFixed32Value:
          type: array
          items:
            type: integer
            format: int64
        pathRepeatedBoolValue:
          type: array
          items:
            type: boolean
        pathRepeatedStringValue:
          type: array
          items:
            type: string
        pathRepeatedBytesValue:
          type: array
          items:
            pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            type: string
            format: byte
        pathRepeatedUint32Value:
          type: array
          items:
            type: integer
            format: int64
        pathRepeatedEnumValue:
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        pathRepeatedSfixed32Value:
          type: array
          items:
            type: integer
            format: int32
        pathRepeatedSfixed64Value:
          type: array
          items:
            type: string
            format: int64
        pathRepeatedSint32Value:
          type: array
          items:
            type: integer
            format: int32
        pathRepeatedSint64Value:
          type: array
          items:
            type: string
            format: int64
      example:
        path_repeated_bool_value:
        - true
        - true
        - false
        - true
        path_repeated_int32_value:
        - 1
        - 2
        - 3
    examplepbABitOfEverythingServiceUpdateBody:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringField1
      - requiredStringField2
      - requiredStringViaFieldBehaviorAnnotation
      - required_field_behavior_json_name_custom
      - required_field_schema_json_name_custom
      type: object
      properties:
        singleNested:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        nested:
          type: array
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: "#/components/schemas/examplepbNumericEnum"
        pathEnumValue:
          $ref: "#/components/schemas/pathenumPathEnum"
        nestedPathEnumValue:
          $ref: "#/components/schemas/MessagePathEnumNestedPathEnum"
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          title: map of numeric enum
          type: object
          additionalProperties:
            $ref: "#/components/schemas/examplepbNumericEnum"
        mappedStringValue:
          title: Map of string title
          type: object
          additionalProperties:
            type: string
          description: Map of string description.
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        enumValueAnnotation:
          $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nestedAnnotation:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
        productId:
          title: Test openapiv2 generation of repeated fields
          type: array
          description: Only digits are allowed.
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
        optionalStringField:
          title: Test openapiv2 generation of required fields with annotation and
            jsonschema to reproduce
          type: string
        requiredStringField1:
          type: string
        requiredStringField2:
          type: string
        required_field_behavior_json_name_custom:
          title: Test openapiv2 handling of required json_name fields
          type: string
        required_field_schema_json_name_custom:
          type: string
        trailingOnly:
          title: Trailing only
          type: string
        trailingOnlyDot:
          type: string
          description: Trailing only dot.
        trailingBoth:
          title: Leading both
          type: string
          description: Trailing both.
        trailingMultiline:
          title: Leading multiline
          type: string
          description: |-
            This is an example of a multi-line comment.

            Trailing multiline.
        uuids:
          title: Specify a custom format of repeated field items
          type: array
          items:
            type: string
            format: uuid
      description: Intentionally complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
      x-a-bit-of-everything-foo: bar
    examplepbBar:
      required:
      - id
      type: object
      properties:
        id:
          type: string
    examplepbBody:
      type: object
      properties:
        name:
          type: string
    examplepbBook:
      type: object
      properties:
        name:
          type: string
          description: |-
            The resource name of the book.

            Format: `publishers/{publisher}/books/{book}`

            Example: `publishers/1257894000000000000/books/my-book`
        id:
          type: string
          description: Output only. The book's ID.
          readOnly: true
        createTime:
          type: string
          description: Output only. Creation time of the book.
          format: date-time
          readOnly: true
      description: |-
        An example resource type from AIP-123 used to test the behavior described in
        the CreateBookRequest message.

        See: https://google.aip.dev/123
      example:
        createTime: 2000-01-23T04:56:07.000+00:00
        name: name
        id: id
    examplepbCheckStatusResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/rpcStatus"
      example:
        status:
          code: 0
          details:
          - key: {}
          - key: {}
          message: message
    examplepbErrorObject:
      type: object
      properties:
        code:
          title: code
          type: integer
          description: Response code
          format: integer
        message:
          title: message
          pattern: "^[a-zA-Z0-9]{1, 32}$"
          type: string
          description: Response message
    examplepbErrorResponse:
      type: object
      properties:
        correlationId:
          title: x-correlation-id
          pattern: "^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$"
          type: string
          description: Unique event identifier for server requests
          format: uuid
          example: 2438ac3c-37eb-4902-adef-ed16b4431030
        error:
          $ref: "#/components/schemas/examplepbErrorObject"
    examplepbNumericEnum:
      title: NumericEnum
      type: string
      description: NumericEnum is one or zero.
      example: ZERO
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
      enum:
      - ZERO
      - ONE
      default: ZERO
      x-a-bit-of-everything-foo: bar
    examplepbRequiredMessageTypeRequest:
      title: |-
        Required message type -> OpenAPI
        https://github.com/grpc-ecosystem/grpc-gateway/issues/2837
      required:
      - foo
      - id
      type: object
      properties:
        id:
          type: string
        foo:
          $ref: "#/components/schemas/protoexamplepbFoo"
    examplepbSnakeEnumResponse:
      type: object
    examplepbsnake_case_0_enum:
      title: |-
        Ignoring lint warnings as this enum type exist to validate proper functionality
        for projects that don't follow these lint rules.
        buf:lint:ignore ENUM_PASCAL_CASE
      type: string
      description: |-
        - value_e: buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
         - value_f: buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
      enum:
      - value_e
      - value_f
      default: value_e
    examplepbsnake_case_enum:
      title: |-
        Ignoring lint warnings as this enum type exist to validate proper functionality
        for projects that don't follow these lint rules.
        buf:lint:ignore ENUM_PASCAL_CASE
      type: string
      description: |-
        - value_c: buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
         - value_d: buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
      enum:
      - value_c
      - value_d
      default: value_c
    oneofenumExampleEnum:
      type: string
      enum:
      - EXAMPLE_ENUM_UNSPECIFIED
      - EXAMPLE_ENUM_FIRST
      default: EXAMPLE_ENUM_UNSPECIFIED
    pathenumPathEnum:
      type: string
      enum:
      - ABC
      - DEF
      default: ABC
    pathenumsnake_case_for_import:
      title: |-
        Ignoring lint warnings as this enum type exist to validate proper functionality
        for projects that don't follow these lint rules.
        buf:lint:ignore ENUM_PASCAL_CASE
      type: string
      description: |-
        - value_x: buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
         - value_y: buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
      enum:
      - value_x
      - value_y
      default: value_x
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      x-schema-name: protobufAny
    protoexamplepbFoo:
      required:
      - bar
      type: object
      properties:
        bar:
          $ref: "#/components/schemas/examplepbBar"
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          description: "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          format: int32
        message:
          type: string
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          items:
            $ref: "#/components/schemas/protobufAny"
      description: |-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It is
        used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details.

        You can find out more about this error model and how to work with it in the
        [API Design Guide](https://cloud.google.com/apis/design/errors).
      example:
        code: 0
        details:
        - key: {}
        - key: {}
        message: message
    subStringMessage:
      type: object
      properties:
        value:
          type: string
      example:
        value: value
    v1_book_name_body:
      type: object
      properties:
        id:
          type: string
          description: Output only. The book's ID.
          readOnly: true
        createTime:
          type: string
          description: Output only. Creation time of the book.
          format: date-time
          readOnly: true
      description: |-
        An example resource type from AIP-123 used to test the behavior described in
        the CreateBookRequest message.

        See: https://google.aip.dev/123
    v1_book_name_body_1:
      type: object
      properties:
        id:
          type: string
          description: Output only. The book's ID.
          readOnly: true
        createTime:
          type: string
          description: Output only. Creation time of the book.
          format: date-time
          readOnly: true
      description: |-
        An example resource type from AIP-123 used to test the behavior described in
        the CreateBookRequest message.

        See: https://google.aip.dev/123
    A bit of everything:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringField1
      - requiredStringField2
      - requiredStringViaFieldBehaviorAnnotation
      - required_field_behavior_json_name_custom
      - required_field_schema_json_name_custom
      type: object
      properties:
        singleNested:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        nested:
          type: array
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: "#/components/schemas/examplepbNumericEnum"
        pathEnumValue:
          $ref: "#/components/schemas/pathenumPathEnum"
        nestedPathEnumValue:
          $ref: "#/components/schemas/MessagePathEnumNestedPathEnum"
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          title: map of numeric enum
          type: object
          additionalProperties:
            $ref: "#/components/schemas/examplepbNumericEnum"
        mappedStringValue:
          title: Map of string title
          type: object
          additionalProperties:
            type: string
          description: Map of string description.
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        enumValueAnnotation:
          $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nestedAnnotation:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
        productId:
          title: Test openapiv2 generation of repeated fields
          type: array
          description: Only digits are allowed.
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
        optionalStringField:
          title: Test openapiv2 generation of required fields with annotation and
            jsonschema to reproduce
          type: string
        requiredStringField1:
          type: string
        requiredStringField2:
          type: string
        required_field_behavior_json_name_custom:
          title: Test openapiv2 handling of required json_name fields
          type: string
        required_field_schema_json_name_custom:
          type: string
        trailingOnly:
          title: Trailing only
          type: string
        trailingOnlyDot:
          type: string
          description: Trailing only dot.
        trailingBoth:
          title: Leading both
          type: string
          description: Trailing both.
        trailingMultiline:
          title: Leading multiline
          type: string
          description: |-
            This is an example of a multi-line comment.

            Trailing multiline.
        uuids:
          title: Specify a custom format of repeated field items
          type: array
          items:
            type: string
            format: uuid
      description: Intentionally complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
      x-a-bit-of-everything-foo: bar
    A bit of everything_1:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringField1
      - requiredStringField2
      - requiredStringViaFieldBehaviorAnnotation
      - required_field_behavior_json_name_custom
      - required_field_schema_json_name_custom
      type: object
      properties:
        singleNested:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        nested:
          type: array
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: "#/components/schemas/examplepbNumericEnum"
        pathEnumValue:
          $ref: "#/components/schemas/pathenumPathEnum"
        nestedPathEnumValue:
          $ref: "#/components/schemas/MessagePathEnumNestedPathEnum"
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          title: map of numeric enum
          type: object
          additionalProperties:
            $ref: "#/components/schemas/examplepbNumericEnum"
        mappedStringValue:
          title: Map of string title
          type: object
          additionalProperties:
            type: string
          description: Map of string description.
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        enumValueAnnotation:
          $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nestedAnnotation:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
        productId:
          title: Test openapiv2 generation of repeated fields
          type: array
          description: Only digits are allowed.
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
        optionalStringField:
          title: Test openapiv2 generation of required fields with annotation and
            jsonschema to reproduce
          type: string
        requiredStringField1:
          type: string
        requiredStringField2:
          type: string
        required_field_behavior_json_name_custom:
          title: Test openapiv2 handling of required json_name fields
          type: string
        required_field_schema_json_name_custom:
          type: string
        trailingOnly:
          title: Trailing only
          type: string
        trailingOnlyDot:
          type: string
          description: Trailing only dot.
        trailingBoth:
          title: Leading both
          type: string
          description: Trailing both.
        trailingMultiline:
          title: Leading multiline
          type: string
          description: |-
            This is an example of a multi-line comment.

            Trailing multiline.
        uuids:
          title: Specify a custom format of repeated field items
          type: array
          items:
            type: string
            format: uuid
      description: Intentionally complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
      x-a-bit-of-everything-foo: bar
    A bit of everything_2:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringField1
      - requiredStringField2
      - requiredStringViaFieldBehaviorAnnotation
      - required_field_behavior_json_name_custom
      - required_field_schema_json_name_custom
      type: object
      properties:
        singleNested:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        nested:
          type: array
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: "#/components/schemas/examplepbNumericEnum"
        pathEnumValue:
          $ref: "#/components/schemas/pathenumPathEnum"
        nestedPathEnumValue:
          $ref: "#/components/schemas/MessagePathEnumNestedPathEnum"
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          title: map of numeric enum
          type: object
          additionalProperties:
            $ref: "#/components/schemas/examplepbNumericEnum"
        mappedStringValue:
          title: Map of string title
          type: object
          additionalProperties:
            type: string
          description: Map of string description.
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        enumValueAnnotation:
          $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nestedAnnotation:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
        productId:
          title: Test openapiv2 generation of repeated fields
          type: array
          description: Only digits are allowed.
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
        optionalStringField:
          title: Test openapiv2 generation of required fields with annotation and
            jsonschema to reproduce
          type: string
        requiredStringField1:
          type: string
        requiredStringField2:
          type: string
        required_field_behavior_json_name_custom:
          title: Test openapiv2 handling of required json_name fields
          type: string
        required_field_schema_json_name_custom:
          type: string
        trailingOnly:
          title: Trailing only
          type: string
        trailingOnlyDot:
          type: string
          description: Trailing only dot.
        trailingBoth:
          title: Leading both
          type: string
          description: Trailing both.
        trailingMultiline:
          title: Leading multiline
          type: string
          description: |-
            This is an example of a multi-line comment.

            Trailing multiline.
        uuids:
          title: Specify a custom format of repeated field items
          type: array
          items:
            type: string
            format: uuid
      description: Intentionally complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
      x-a-bit-of-everything-foo: bar
    A bit of everything_3:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringField1
      - requiredStringField2
      - requiredStringViaFieldBehaviorAnnotation
      - required_field_behavior_json_name_custom
      - required_field_schema_json_name_custom
      type: object
      properties:
        singleNested:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        nested:
          type: array
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: "#/components/schemas/examplepbNumericEnum"
        pathEnumValue:
          $ref: "#/components/schemas/pathenumPathEnum"
        nestedPathEnumValue:
          $ref: "#/components/schemas/MessagePathEnumNestedPathEnum"
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          title: map of numeric enum
          type: object
          additionalProperties:
            $ref: "#/components/schemas/examplepbNumericEnum"
        mappedStringValue:
          title: Map of string title
          type: object
          additionalProperties:
            type: string
          description: Map of string description.
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        enumValueAnnotation:
          $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nestedAnnotation:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
        productId:
          title: Test openapiv2 generation of repeated fields
          type: array
          description: Only digits are allowed.
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
        optionalStringField:
          title: Test openapiv2 generation of required fields with annotation and
            jsonschema to reproduce
          type: string
        requiredStringField1:
          type: string
        requiredStringField2:
          type: string
        required_field_behavior_json_name_custom:
          title: Test openapiv2 handling of required json_name fields
          type: string
        required_field_schema_json_name_custom:
          type: string
        trailingOnly:
          title: Trailing only
          type: string
        trailingOnlyDot:
          type: string
          description: Trailing only dot.
        trailingBoth:
          title: Leading both
          type: string
          description: Trailing both.
        trailingMultiline:
          title: Leading multiline
          type: string
          description: |-
            This is an example of a multi-line comment.

            Trailing multiline.
        uuids:
          title: Specify a custom format of repeated field items
          type: array
          items:
            type: string
            format: uuid
      description: Intentionally complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
      x-a-bit-of-everything-foo: bar
    ABitOfEverythingServiceDeepPathEchoBody_singleNested:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        ok:
          $ref: "#/components/schemas/NestedDeepEnum"
      description: Nested is nested type.
      example: "{\"ok\":\"TRUE\"}"
    A bit of everything_4:
      title: A bit of everything
      type: object
      properties:
        singleNested:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        nested:
          type: array
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: "#/components/schemas/examplepbNumericEnum"
        pathEnumValue:
          $ref: "#/components/schemas/pathenumPathEnum"
        nestedPathEnumValue:
          $ref: "#/components/schemas/MessagePathEnumNestedPathEnum"
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          title: map of numeric enum
          type: object
          additionalProperties:
            $ref: "#/components/schemas/examplepbNumericEnum"
        mappedStringValue:
          title: Map of string title
          type: object
          additionalProperties:
            type: string
          description: Map of string description.
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: "#/components/schemas/examplepbNumericEnum"
        enumValueAnnotation:
          $ref: "#/components/schemas/examplepbNumericEnum"
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: "#/components/schemas/ABitOfEverythingNested"
        nestedAnnotation:
          $ref: "#/components/schemas/ABitOfEverythingNested"
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
        productId:
          title: Test openapiv2 generation of repeated fields
          type: array
          description: Only digits are allowed.
          items:
            maxLength: 19
            minLength: 1
            pattern: "^[0-9]+$"
            type: string
        optionalStringField:
          title: Test openapiv2 generation of required fields with annotation and
            jsonschema to reproduce
          type: string
        requiredStringField1:
          type: string
        requiredStringField2:
          type: string
        required_field_behavior_json_name_custom:
          title: Test openapiv2 handling of required json_name fields
          type: string
        required_field_schema_json_name_custom:
          type: string
        trailingOnly:
          title: Trailing only
          type: string
        trailingOnlyDot:
          type: string
          description: Trailing only dot.
        trailingBoth:
          title: Leading both
          type: string
          description: Trailing both.
        trailingMultiline:
          title: Leading multiline
          type: string
          description: |-
            This is an example of a multi-line comment.

            Trailing multiline.
        uuids:
          title: Specify a custom format of repeated field items
          type: array
          items:
            type: string
            format: uuid
      description: Intentionally complicated message type to cover many features of
        Protobuf.
      example: "{\"int64_value\":12,\"double_value\":12.3}"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
      x-amazon-apigateway-authorizer:
        authorizerResultTtlInSeconds: 60
        type: token
      x-amazon-apigateway-authtype: oauth2
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            admin: Grants read and write access to administrative information
            read: Grants read access
            write: Grants write access
x-grpc-gateway-baz-list:
- one
- true
x-grpc-gateway-foo: bar
x-original-swagger-version: "2.0"
