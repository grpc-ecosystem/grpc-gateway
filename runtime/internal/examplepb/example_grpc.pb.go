// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package examplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NestedServiceClient is the client API for NestedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NestedServiceClient interface {
	Update(ctx context.Context, in *UpdateNestedRequest, opts ...grpc.CallOption) (*NestedOuter, error)
}

type nestedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNestedServiceClient(cc grpc.ClientConnInterface) NestedServiceClient {
	return &nestedServiceClient{cc}
}

func (c *nestedServiceClient) Update(ctx context.Context, in *UpdateNestedRequest, opts ...grpc.CallOption) (*NestedOuter, error) {
	out := new(NestedOuter)
	err := c.cc.Invoke(ctx, "/grpc.gateway.runtime.internal.examplepb.NestedService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NestedServiceServer is the server API for NestedService service.
type NestedServiceServer interface {
	Update(context.Context, *UpdateNestedRequest) (*NestedOuter, error)
}

// UnimplementedNestedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNestedServiceServer struct {
}

func (*UnimplementedNestedServiceServer) Update(context.Context, *UpdateNestedRequest) (*NestedOuter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterNestedServiceServer(s *grpc.Server, srv NestedServiceServer) {
	s.RegisterService(&_NestedService_serviceDesc, srv)
}

func _NestedService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNestedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestedServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.runtime.internal.examplepb.NestedService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestedServiceServer).Update(ctx, req.(*UpdateNestedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NestedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.runtime.internal.examplepb.NestedService",
	HandlerType: (*NestedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _NestedService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime/internal/examplepb/example.proto",
}
