openapi: 3.0.1
info:
  title: examples/internal/proto/examplepb/response_body_service.proto
  version: version not set
servers:
- url: /
tags:
- name: ResponseBodyService
paths:
  /responsebodies/{data}:
    get:
      tags:
      - ResponseBodyService
      operationId: ResponseBodyService_ListResponseBodies
      parameters:
      - name: data
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/examplepbRepeatedResponseBodyOutResponse"
                x-content-type: application/json
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /responsebody/samename/{data}:
    get:
      tags:
      - ResponseBodyService
      operationId: ResponseBodyService_GetResponseBodySameName
      parameters:
      - name: data
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /responsebody/stream/{data}:
    get:
      tags:
      - ResponseBodyService
      operationId: ResponseBodyService_GetResponseBodyStream
      parameters:
      - name: data
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: (streaming responses)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream result of examplepbResponseBodyOut"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /responsebody/{data}:
    get:
      tags:
      - ResponseBodyService
      operationId: ResponseBodyService_GetResponseBody
      parameters:
      - name: data
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examplepbResponseBodyOutResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
  /responsestrings/{data}:
    get:
      tags:
      - ResponseBodyService
      operationId: ResponseBodyService_ListResponseStrings
      parameters:
      - name: data
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
components:
  schemas:
    ResponseResponseType:
      title: |-
        - UNKNOWN: UNKNOWN
         - A: A is 1
         - B: B is 2
      type: string
      default: UNKNOWN
      enum:
      - UNKNOWN
      - A
      - B
    examplepbRepeatedResponseBodyOut:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: "#/components/schemas/examplepbRepeatedResponseBodyOutResponse"
    examplepbRepeatedResponseBodyOutResponse:
      type: object
      properties:
        data:
          type: string
        type:
          $ref: "#/components/schemas/ResponseResponseType"
      example:
        data: data
        type: UNKNOWN
    examplepbRepeatedResponseStrings:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    examplepbResponseBodyOut:
      type: object
      properties:
        response:
          $ref: "#/components/schemas/examplepbResponseBodyOutResponse"
    examplepbResponseBodyOutResponse:
      type: object
      properties:
        data:
          type: string
      example:
        data: data
    examplepbResponseBodyValue:
      type: object
      properties:
        responseBodyValue:
          type: string
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      x-schema-name: protobufAny
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          description: "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          format: int32
        message:
          type: string
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          items:
            $ref: "#/components/schemas/protobufAny"
      description: |-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It is
        used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details.

        You can find out more about this error model and how to work with it in the
        [API Design Guide](https://cloud.google.com/apis/design/errors).
      example:
        code: 0
        details:
        - key: {}
        - key: {}
        message: message
    Stream result of examplepbResponseBodyOut:
      title: Stream result of examplepbResponseBodyOut
      type: object
      properties:
        result:
          $ref: "#/components/schemas/examplepbResponseBodyOutResponse"
        error:
          $ref: "#/components/schemas/rpcStatus"
      example:
        result:
          data: data
        error:
          code: 0
          details:
          - key: {}
          - key: {}
          message: message
x-original-swagger-version: "2.0"
