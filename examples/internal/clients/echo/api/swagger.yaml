---
swagger: "2.0"
info:
  description: "Echo Service API consists of a single service which returns\na message."
  version: "version not set"
  title: "Echo Service"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /v1/example/echo/{id}:
    post:
      tags:
      - "EchoService"
      summary: "Echo method receives a simple message and returns it."
      description: "The message posted as the id parameter will also be\nreturned."
      operationId: "EchoService_Echo"
      parameters:
      - name: "id"
        in: "path"
        description: "Id represents the message identifier."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/examplepbSimpleMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /v1/example/echo/{id}/{num}:
    get:
      tags:
      - "EchoService"
      summary: "Echo method receives a simple message and returns it."
      description: "The message posted as the id parameter will also be\nreturned."
      operationId: "EchoService_Echo2"
      parameters:
      - name: "id"
        in: "path"
        description: "Id represents the message identifier."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "num"
        in: "path"
        required: true
        type: "string"
        format: "int64"
        x-exportParamName: "Num"
      - name: "line_num"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "LineNum"
        x-optionalDataType: "String"
      - name: "lang"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Lang"
        x-optionalDataType: "String"
      - name: "status.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "StatusProgress"
        x-optionalDataType: "String"
      - name: "status.note"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "StatusNote"
        x-optionalDataType: "String"
      - name: "en"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "En"
        x-optionalDataType: "String"
      - name: "no.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "NoProgress"
        x-optionalDataType: "String"
      - name: "no.note"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "NoNote"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/examplepbSimpleMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /v1/example/echo/{id}/{num}/{lang}:
    get:
      tags:
      - "EchoService"
      summary: "Echo method receives a simple message and returns it."
      description: "The message posted as the id parameter will also be\nreturned."
      operationId: "EchoService_Echo3"
      parameters:
      - name: "id"
        in: "path"
        description: "Id represents the message identifier."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "num"
        in: "path"
        required: true
        type: "string"
        format: "int64"
        x-exportParamName: "Num"
      - name: "lang"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Lang"
      - name: "line_num"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "LineNum"
        x-optionalDataType: "String"
      - name: "status.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "StatusProgress"
        x-optionalDataType: "String"
      - name: "status.note"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "StatusNote"
        x-optionalDataType: "String"
      - name: "en"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "En"
        x-optionalDataType: "String"
      - name: "no.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "NoProgress"
        x-optionalDataType: "String"
      - name: "no.note"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "NoNote"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/examplepbSimpleMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /v1/example/echo1/{id}/{line_num}/{status.note}:
    get:
      tags:
      - "EchoService"
      summary: "Echo method receives a simple message and returns it."
      description: "The message posted as the id parameter will also be\nreturned."
      operationId: "EchoService_Echo4"
      parameters:
      - name: "id"
        in: "path"
        description: "Id represents the message identifier."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "line_num"
        in: "path"
        required: true
        type: "string"
        format: "int64"
        x-exportParamName: "LineNum"
      - name: "status.note"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StatusNote"
      - name: "num"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "Num"
        x-optionalDataType: "String"
      - name: "lang"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Lang"
        x-optionalDataType: "String"
      - name: "status.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "StatusProgress"
        x-optionalDataType: "String"
      - name: "en"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "En"
        x-optionalDataType: "String"
      - name: "no.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "NoProgress"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/examplepbSimpleMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /v1/example/echo2/{no.note}:
    get:
      tags:
      - "EchoService"
      summary: "Echo method receives a simple message and returns it."
      description: "The message posted as the id parameter will also be\nreturned."
      operationId: "EchoService_Echo5"
      parameters:
      - name: "no.note"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NoNote"
      - name: "id"
        in: "query"
        description: "Id represents the message identifier."
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "num"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "Num"
        x-optionalDataType: "String"
      - name: "line_num"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "LineNum"
        x-optionalDataType: "String"
      - name: "lang"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Lang"
        x-optionalDataType: "String"
      - name: "status.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "StatusProgress"
        x-optionalDataType: "String"
      - name: "en"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "En"
        x-optionalDataType: "String"
      - name: "no.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "NoProgress"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/examplepbSimpleMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /v1/example/echo_body:
    post:
      tags:
      - "EchoService"
      summary: "EchoBody method receives a simple message and returns it."
      operationId: "EchoService_EchoBody"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/examplepbSimpleMessage"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/examplepbSimpleMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /v1/example/echo_delete:
    delete:
      tags:
      - "EchoService"
      summary: "EchoDelete method receives a simple message and returns it."
      operationId: "EchoService_EchoDelete"
      parameters:
      - name: "id"
        in: "query"
        description: "Id represents the message identifier."
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "num"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "Num"
        x-optionalDataType: "String"
      - name: "line_num"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "LineNum"
        x-optionalDataType: "String"
      - name: "lang"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Lang"
        x-optionalDataType: "String"
      - name: "status.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "StatusProgress"
        x-optionalDataType: "String"
      - name: "status.note"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "StatusNote"
        x-optionalDataType: "String"
      - name: "en"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "En"
        x-optionalDataType: "String"
      - name: "no.progress"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "NoProgress"
        x-optionalDataType: "String"
      - name: "no.note"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "NoNote"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/examplepbSimpleMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
definitions:
  examplepbEmbedded:
    type: "object"
    properties:
      progress:
        type: "string"
        format: "int64"
      note:
        type: "string"
    description: "Embedded represents a message embedded in SimpleMessage."
    example:
      note: "note"
      progress: "progress"
  examplepbSimpleMessage:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Id represents the message identifier."
      num:
        type: "string"
        format: "int64"
      line_num:
        type: "string"
        format: "int64"
      lang:
        type: "string"
      status:
        $ref: "#/definitions/examplepbEmbedded"
      en:
        type: "string"
        format: "int64"
      "no":
        $ref: "#/definitions/examplepbEmbedded"
    description: "SimpleMessage represents a simple message sent to the Echo service."
    example:
      "no":
        note: "note"
        progress: "progress"
      line_num: "line_num"
      num: "num"
      en: "en"
      id: "id"
      lang: "lang"
      status:
        note: "note"
        progress: "progress"
  protobufAny:
    type: "object"
    properties:
      type_url:
        type: "string"
        description: "A URL/resource name that uniquely identifies the type of the\
          \ serialized\nprotocol buffer message. This string must contain at least\n\
          one \"/\" character. The last segment of the URL's path must represent\n\
          the fully qualified name of the type (as in\n`path/google.protobuf.Duration`).\
          \ The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\
          \nIn practice, teams usually precompile into the binary all types that they\n\
          expect it to use in the context of Any. However, for URLs which use the\n\
          scheme `http`, `https`, or no scheme, one can optionally set up a type\n\
          server that maps type URLs to message definitions as follows:\n\n* If no\
          \ scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must\
          \ yield a [google.protobuf.Type][]\n  value in binary format, or produce\
          \ an error.\n* Applications are allowed to cache lookup results based on\
          \ the\n  URL, or have them precompiled into a binary to avoid any\n  lookup.\
          \ Therefore, binary compatibility needs to be preserved\n  on changes to\
          \ types. (Use versioned type names to manage\n  breaking changes.)\n\nNote:\
          \ this functionality is not currently available in the official\nprotobuf\
          \ release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\
          \nSchemes other than `http`, `https` (or the empty scheme) might be\nused\
          \ with implementation specific semantics."
      value:
        type: "string"
        format: "byte"
        description: "Must be a valid serialized protocol buffer of the above specified\
          \ type."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "`Any` contains an arbitrary serialized protocol buffer message along\
      \ with a\nURL that describes the type of the serialized message.\n\nProtobuf\
      \ library provides support to pack/unpack Any values in the form\nof utility\
      \ functions or additional generated methods of the Any type.\n\nExample 1: Pack\
      \ and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n\
      \    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack\
      \ and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n\
      \    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n\
      \    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n\
      \    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n\
      \      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in\
      \ Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n\
      \     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo);\
      \ err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf\
      \ library will by default use\n'type.googleapis.com/full.type.name' as the type\
      \ URL and the unpack\nmethods only use the fully qualified type name after the\
      \ last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n\
      name \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses\
      \ the regular\nrepresentation of the deserialized, embedded message, with an\n\
      additional field `@type` which contains the type URL. Example:\n\n    package\
      \ google.profile;\n    message Person {\n      string first_name = 1;\n    \
      \  string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\"\
      ,\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf\
      \ the embedded message type is well-known and has a custom JSON\nrepresentation,\
      \ that representation will be embedded adding a field\n`value` which holds the\
      \ custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\
      \n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n\
      \      \"value\": \"1.212s\"\n    }"
  runtimeError:
    type: "object"
    properties:
      error:
        type: "string"
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      details:
        type: "array"
        items:
          $ref: "#/definitions/protobufAny"
